{"version":3,"sources":["shared/axios-service.js","components/app/app-view.js","components/app/app-container.js","serviceWorker.js","index.js"],"names":["AxiosService","api_url","api_endpoint","this","http","axios","create","baseURL","params","get","then","response","data","AppView","users","loading","onLoadUsers","className","WideSection","Jumbotron","Button","variant","onClick","Container","Row","Col","xs","md","lg","map","user","key","id","Card","Body","Title","name","Text","email","catchPhrase","props","children","userService","AppContainer","useState","setLoading","setUsers","loadUsers","a","$get","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0SAEqBA,E,WAEnB,WAAYC,EAASC,GAAe,oBAClCC,KAAKF,QAAUA,EACfE,KAAKD,aAAeA,EACpBC,KAAKC,KAAOC,IAAMC,OAAO,CAAEC,QAASN,I,sLAG3BO,E,+BAAS,G,kBACXL,KAAKC,KAAKK,IAAIN,KAAKD,aAAc,CAAEM,WAAUE,MAAK,SAAAC,GACvD,OAAOA,EAASC,S,iKCDP,SAASC,EAAT,GAAiD,IAA/BC,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,YAC/C,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWF,UAAU,QACnB,mDACA,mJAGA,2BACE,kBAACG,EAAA,EAAD,CAAQC,QAAQ,UAAUC,QAAS,kBAAMN,MAAzC,kBAKN,kBAACO,EAAA,EAAD,CAAWN,UAAU,WACnB,kBAACO,EAAA,EAAD,KACGT,GACC,kBAACU,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,KACrB,2CAIFb,GAAWD,EAAMe,KAAI,SAAAC,GAAI,OACzB,kBAACL,EAAA,EAAD,CAAKC,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIG,IAAKD,EAAKE,IACnC,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,KAAN,KACE,kBAACD,EAAA,EAAKE,MAAN,KAAaL,EAAKM,MAClB,kBAACH,EAAA,EAAKI,KAAN,gBACWP,EAAKQ,MACd,6BAFF,iBAGiBR,EAAKS,aAEtB,kBAACnB,EAAA,EAAD,CAAQC,QAAQ,WAAhB,yBAYlB,SAASH,EAAYsB,GACnB,OACE,yBAAKvB,UAAU,gBACb,kBAACM,EAAA,EAAD,KACGiB,EAAMC,WCrDf,IAAIC,EAAc,IAAI1C,EAAa,uCAAwC,SAE5D,SAAS2C,IAAgB,IAAD,EACPC,oBAAS,GADF,mBAC9B7B,EAD8B,KACrB8B,EADqB,OAEXD,mBAAS,IAFE,mBAE9B9B,EAF8B,KAEvBgC,EAFuB,cAItBC,IAJsB,2EAIrC,sBAAAC,EAAA,6DACEH,GAAW,GADb,KAEEC,EAFF,SAEiBJ,EAAYO,OAF7B,kCAGEJ,GAAW,GAHb,4CAJqC,sBAcrC,OAJAK,qBAAU,WACRH,MACC,IAGD,kBAAClC,EAAD,CAASC,MAAOA,EAAOC,QAASA,EAASC,YAAa+B,ICZtCI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrD,MAAK,SAAAsD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.05c8e905.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default class AxiosService {\r\n\r\n  constructor(api_url, api_endpoint) {\r\n    this.api_url = api_url;\r\n    this.api_endpoint = api_endpoint;\r\n    this.http = axios.create({ baseURL: api_url });\r\n  }\r\n\r\n  async $get(params = {}) {\r\n    return this.http.get(this.api_endpoint, { params }).then(response => {\r\n      return response.data;\r\n    });\r\n  }\r\n  \r\n}","import React from 'react';\r\n\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport Row from 'react-bootstrap/Row';\r\nimport './app-style.css';\r\n\r\n\r\nexport default function AppView({users, loading, onLoadUsers}) {\r\n  return (\r\n    <div className=\"App\">\r\n      <WideSection>\r\n        <Jumbotron className=\"my-0\">\r\n          <h1>Fetch Data From API</h1>\r\n          <p>\r\n            This application fetches data from a public API using axios library and displays it with React Bootstrap components.\r\n          </p>\r\n          <p>\r\n            <Button variant=\"primary\" onClick={() => onLoadUsers()}>Reload Data</Button>\r\n          </p>\r\n        </Jumbotron>\r\n      </WideSection>\r\n\r\n      <Container className=\"section\">\r\n        <Row>\r\n          {loading && (\r\n            <Col xs=\"12\" md=\"6\" lg=\"4\">\r\n              <p>Loading...</p>\r\n            </Col>\r\n          )}\r\n\r\n          {!loading && users.map(user =>\r\n            <Col xs=\"12\" md=\"6\" lg=\"4\" key={user.id}>\r\n              <Card>\r\n                <Card.Body>\r\n                  <Card.Title>{user.name}</Card.Title>\r\n                  <Card.Text>\r\n                    E-mail: {user.email}\r\n                    <br/>\r\n                    Catch Phrase: {user.catchPhrase}\r\n                  </Card.Text>\r\n                  <Button variant=\"primary\">Go somewhere</Button>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          )}\r\n        </Row>\r\n\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction WideSection(props) {\r\n  return (\r\n    <div className=\"wide-section\">\r\n      <Container>\r\n        {props.children}\r\n      </Container>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport AxiosService from '../../shared/axios-service';\r\nimport AppView from './app-view';\r\n\r\n\r\nlet userService = new AxiosService('https://jsonplaceholder.typicode.com', 'users');\r\n\r\nexport default function AppContainer() {\r\n  const [loading, setLoading] = useState(true);\r\n  const [users, setUsers] = useState([]);\r\n\r\n  async function loadUsers() {\r\n    setLoading(true);\r\n    setUsers(await userService.$get());\r\n    setLoading(false);\r\n  }\r\n\r\n  useEffect(() => {\r\n    loadUsers();\r\n  }, []);\r\n\r\n  return (\r\n    <AppView users={users} loading={loading} onLoadUsers={loadUsers} />\r\n  );\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'holderjs';\r\n\r\nimport { App } from './components/app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}